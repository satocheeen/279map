type Auth0Config {
    domain: String!
    clientId: String!
    audience: String!
}
type MapListItem {
    mapId: String!
    name: String!
    description: String
    thumbnail: String
    authLv: Auth!
}

"地図ページのメタ情報"
type MapMetaInfo {
    mapId: String!
    title: String!
    description: String
    keyword: String
    image: String
}

type NoneConfig {
    dummy: Boolean  # fragmentで種別判定するために型用意
}
union ServerConfig = Auth0Config | NoneConfig

type ItemDefine {
    id: DataId!
    datasourceId: String!
    name: String!
    geometry: Geometry!
    geoProperties: GeoProperties!
    lastEditedTime: String!

    "アイテムと対になるコンテンツ"
    content: ContentsDefine
}

type CategoryDefine {
    "対象のコンテンツデータソースID"
    datasourceId: String!
    "対象のフィールド"
    fieldKey: String!
    "属するカテゴリ一覧"
    categories: [CategoryItem!]!
}
type CategoryItem {
    value: String!
    color: String!
}
type EventDefine {
    itemDatasourceId: String!
    "日付を持つコンテンツ一覧"
    contents: [EventContent!]!
}
type EventContent {
    id: DataId!
    date: String!
}
enum ContentType {
    normal
    sns
}
type ContentsDefine {
    id: DataId!
    datasourceId: String!
    parentId: DataId
    # コンテンツにタイトル以外の値が登録されている場合、true
    hasValue: Boolean!
    # 画像を持つ場合、true
    hasImage: Boolean!
    values: ContentValueMap!
    "他の地図でも参照されているか"
    usingOtherMap: Boolean!
    "もう片方の地図で参照されている場合に、その参照元のID"
    anotherMapItemId: DataId
    "trueの場合、ユーザ権限に関わらずreadonly"
    readonly: Boolean
    "紐づいているコンテンツのID一覧"
    linkedContents: [DataId!]!
}
type UnpointContent {
    originalId: String!
    "DBに登録済みの場合は、dataIdも返す"
    dataId: DataId
    title: String!
    overview: String
    hasImage: Boolean
}
type GetUnpointContentsResult {
    contents: [UnpointContent!]!
    nextToken: String
}
# getThumbで返す画像サイズ
enum ThumbSize {
    Thumbnail
    Medium
}
type ContentsDatasource {
    datasourceId: String!
    name: String!
}

# --------------
# search関連
# --------------
input Condition {
    category: [CategoryCondition!]
    date: [DateCondition!]
    keyword: [String!]
}
input CategoryCondition {
    "対象のコンテンツデータソースID"
    datasourceId: String!
    "対象のフィールド"
    fieldKey: String!
    "カテゴリ値"
    value: String!
}
input DateCondition {
    "日付文字列"
    date: String!
    "クライアント端末のUTCからの時差"
    utcOffset: Int!
}

# --------------
# geocoder関連
# --------------
enum GeocoderTarget {
    Point
    Area
}

type GeocoderItem {
    idInfo: GeocoderIdInfo!
    name: String!
    geometry: Geometry!
}

# --------------

type Query {
    config: ServerConfig!

    "ユーザがアクセス可能な地図情報一覧を返す"
    getMapList: [MapListItem!]!

    "地図のメタ情報を返す。ユーザがアクセス不可能な地図については、エラー"
    getMapMetaInfo (
        mapId: String!
    ): MapMetaInfo!

    getItems(
        wkt: String!,
        zoom: Float!,
        datasourceId: String!,

        "(optional) 指定されている場合、この更新日時以降に更新されたアイテムのみ返す"
        latestEditedTime: String

        "(optional) 指定されている場合、このidのアイテムは結果から除く TODO: deprecated"
        excludeItemIds: [DataId!]
    ): [ItemDefine!]!

    getItemsById(targets: [DataId!]!): [ItemDefine!]!

    getCategory(datasourceIds: [String!]): [CategoryDefine!]!
    getEvent(datasourceIds: [String!]): [EventDefine!]!
    getContent(id: DataId!): ContentsDefine!

    "未割当コンテンツを取得する"
    getUnpointContents(
        "取得対象コンテンツデータソースID"
        datasourceId: String!

        "前回の続きを取得する場合に指定する"
        nextToken: String

        "指定されている場合、当該キーワードをタイトルに含むコンテンツを返す"
        keyword: String
    ): GetUnpointContentsResult!

    "指定のコンテンツのサムネイル画像を返す"
    getThumb(contentId: DataId!): String!

    "指定の画像を返す"
    getImage(imageId: Int!, size: ThumbSize!): String!

    getImageUrl(contentId: DataId!): String!

    "検索。検索にヒットしたもののデータIDを返す"
    search(
        condition: Condition!,
        "指定されている場合、指定のデータソースのみ検索対象にする"
        datasourceIds: [String!]
    ): [DataId!]!

    geocoder(address: String!, searchTarget: [GeocoderTarget!]!): [GeocoderItem!]!
    getGeocoderFeature(id: GeocoderIdInfo!): Geometry!

    getUserList: [User!]!
    getLinkableContentsDatasources: [ContentsDatasource!]!
}
