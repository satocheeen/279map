type Auth0Config {
    domain: String!
    clientId: String!
    audience: String!
}
type MapListItem {
    mapId: String!
    name: String!
    description: String
    thumbnail: String
    authLv: Auth!
}
type NoneConfig {
    dummy: Boolean  # fragmentで種別判定するために型用意
}
union ServerConfig = Auth0Config | NoneConfig

type ItemDefine {
    id: DataId!
    datasourceId: String!
    name: String!
    geometry: Geometry!
    geoProperties: GeoProperties!
    lastEditedTime: String!

    "アイテムに紐づくコンテンツ"
    content: ContentsDefine
}

type CategoryDefine {
    name: String!
    color: String!
    datasourceIds: [String!]!
}
type EventDefine {
    itemDatasourceId: String!
    "日付を持つコンテンツ一覧"
    contents: [EventContent!]!
}
type EventContent {
    id: DataId!
    date: String!
}
enum ContentType {
    normal
    sns
}
type ContentsDefine {
    id: DataId!
    datasourceId: String!
    parentId: DataId
    # コンテンツにタイトル以外の値が登録されている場合、true
    hasValue: Boolean!
    # 画像を持つ場合、true
    hasImage: Boolean!
    values: ContentValueMap!
    children: [ContentsDefine!]
    "他の地図でも参照されているか"
    usingOtherMap: Boolean!
    "もう片方の地図で参照されている場合に、その参照元のID"
    anotherMapItemId: DataId
    "trueの場合、ユーザ権限に関わらずreadonly"
    readonly: Boolean
}
type UnpointContent {
    originalId: String!
    title: String!
    thumb: String
    overview: String
}
type GetUnpointContentsResult {
    contents: [UnpointContent!]!
    nextToken: String
}
# getThumbで返す画像サイズ
enum ThumbSize {
    Thumbnail
    Medium
}
type ContentsDatasource {
    datasourceId: String!
    name: String!
}

# --------------
# search関連
# --------------
input Condition {
    category: [String!]
    date: [String!]
    keyword: [String!]
}

type SearchHitItem {
    id: DataId!
    "検索条件がアイテム自体にもヒットした場合、True"
    hitItem: Boolean!
    "当該アイテム配下の検索条件に合致するコンテンツID一覧"
    hitContents: [DataId!]!  # TODO: 孫コンテンツも含める
}

# --------------
# geocoder関連
# --------------
enum GeocoderTarget {
    Point
    Area
}

type GeocoderItem {
    idInfo: GeocoderIdInfo!
    name: String!
    geometry: Geometry!
}

# --------------
# SNS関連
# --------------
type SnsPreviewResult {
    type: SnsType!
    posts: [SnsPreviewPost!]!
}
enum SnsType {
    InstagramUser
}
type SnsPreviewPost {
    text: String!
    media: MediaInfo
    date: String
}
type MediaInfo {
    type: MediaType!
    url: String!
}
enum MediaType {
    image
    Video
}
# --------------

type Query {
    config: ServerConfig!

    "ユーザがアクセス可能な地図情報一覧を返す"
    getMapList: [MapListItem!]!

    getItems(
        wkt: String!,
        zoom: Float!,
        datasourceId: String!,

        "(optional) 指定されている場合、この更新日時以降に更新されたアイテムのみ返す"
        latestEditedTime: String

        "(optional) 指定されている場合、このidのアイテムは結果から除く TODO: deprecated"
        excludeItemIds: [DataId!]
    ): [ItemDefine!]!

    getItemsById(targets: [DataId!]!): [ItemDefine!]!

    getCategory(datasourceIds: [String!]): [CategoryDefine!]!
    getEvent(datasourceIds: [String!]): [EventDefine!]!
    getContent(id: DataId!): ContentsDefine!

    "未割当コンテンツを取得する"
    getUnpointContents(
        "取得対象コンテンツデータソースID"
        datasourceId: String!

        "前回の続きを取得する場合に指定する"
        nextToken: String

        "指定されている場合、当該キーワードをタイトルに含むコンテンツを返す"
        keyword: String
    ): GetUnpointContentsResult!

    "指定のコンテンツのサムネイル画像を返す"
    getThumb(contentId: DataId!): String!

    "指定の画像を返す"
    getImage(imageId: Int!, size: ThumbSize!): String!

    getImageUrl(contentId: DataId!): String!

    # datasourceIds => 指定されている場合、指定のデータソースのみ検索対象にする
    search(condition: Condition!, datasourceIds: [String!]): [SearchHitItem!]!

    geocoder(address: String!, searchTarget: [GeocoderTarget!]!): [GeocoderItem!]!
    getGeocoderFeature(id: GeocoderIdInfo!): Geometry!

    getUserList: [User!]!
    getLinkableContentsDatasources: [ContentsDatasource!]!
}
