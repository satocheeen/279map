# 当該ファイルでは、全体的に使用する型を定義
# 279map-backend-commonでも、このファイルを参照して型を自動生成している。
enum Auth {
    None
    Request
    View
    Edit
    Admin
}

enum MapKind {
    Real
    Virtual
}

enum ErrorType {
    "指定の地図が存在しない場合"
    UndefinedMap
    "地図が認証必要だが、ユーザがtokenを持たない場合（＝ログインが必要な場合）"
    Unauthorized
    "ユーザのtokenが有効切れの場合"
    Forbidden
    "アクセス権限のない地図にユーザがアクセスしようとした場合"
    NoAuthenticate
    "アクセス権限のない地図に登録申請中の場合"
    Requesting
    "編集権限を持たないユーザが編集権限の必要なAPIを実行しようとした場合"
    OperationForbidden
    "セッションタイムアウト時"
    SessionTimeout
    "その他接続エラー"
    IllegalError
}

# --------------
# connect
# --------------
enum PopupMode {
    hidden
    minimum
    maximum
}
enum ItemLabelMode {
    show
    hidden
}

type VisibleDataSourceDatasource {
    dataSourceId: String
}
type VisibleDataSourceGroup {
    group: String
}
union VisibleDataSource = VisibleDataSourceDatasource | VisibleDataSourceGroup

type MapPageOptions {
    popupMode: PopupMode
    itemLabel: ItemLabelMode
    "初期表示するデータソースを絞る場合に指定する"
    visibleDataSources: [VisibleDataSource!]!
    "ゲストユーザの操作権限"
    guestUserAuthLevel: Auth!
    "新規登録ユーザに設定する権限"
    newUserAuthLevel: Auth!
    "使用パネル"
    usePanels: [String!]
    "その他オプション文字列"
    options: [String!]
}

type MapDefine {
    name: String!
    useMaps: [MapKind!]!
    defaultMapKind: MapKind!
    options: MapPageOptions!
}

# ------------------
# DatasourceConfig
# ------------------
enum DatasourceKindType {
    Item
    RealPointContent
    Content
    Track
}

type DatasourceInfo {
    datasourceId: String!
    name: String!
    visible: Boolean!
    kind: DatasourceKindType!
    config: DatasourceConfig!
}
type ItemConfig {
    kind: DatasourceKindType!
    layerGroup: String
    editable: Boolean!
    deletable: Boolean!
}
scalar IconKey
type RealPointContentConfig {
    kind: DatasourceKindType!
    defaultIcon: IconKey
    layerGroup: String
    linkableContents: Boolean!
    editable: Boolean!
    deletable: Boolean!
}
type ContentConfig {
    kind: DatasourceKindType!
    linkableChildContents: Boolean!
    disableUnlinkMap: Boolean
    editable: Boolean!
    deletable: Boolean!
}
type TrackConfig {
    kind: DatasourceKindType!
    layerGroup: String
    editable: Boolean!
    deletable: Boolean!
}
union DatasourceConfig = ItemConfig | RealPointContentConfig | ContentConfig | TrackConfig
