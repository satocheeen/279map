# ----------------------------------------------------------------------
# 当該ファイルでは、全体的に使用する型を定義
# 279map-backend-commonでも、このファイルを参照して型を自動生成している。
# ----------------------------------------------------------------------
enum Auth {
    None
    Request
    View
    Edit
    Admin
}

enum ConnectErrorType {
    "指定の地図が存在しない場合"
    UndefinedMap
    "地図が認証必要だが、ユーザがtokenを持たない場合（＝ログインが必要な場合）"
    Unauthorized
    "ユーザのtokenが有効切れの場合"
    Forbidden
    "アクセス権限のない地図にユーザがアクセスしようとした場合"
    NoAuthenticate
    "アクセス権限のない地図に登録申請中の場合"
    Requesting
    "編集権限を持たないユーザが編集権限の必要なAPIを実行しようとした場合"
    OperationForbidden
    "セッションタイムアウト時"
    SessionTimeout
    "その他接続エラー"
    IllegalError
}

type User {
    id: ID!
    name: String!
    authLv: Auth!
}

# --------------
# connect
# --------------
enum PopupMode {
    hidden
    minimum
    maximum
}
"""
アイテムラベル表示モード
"""
enum ItemLabelMode {
    "表示する"
    show
    "表示しない"
    hidden
    "村マップのみ表示"
    virtualShow
    "世界地図のみ表示"
    realShow
}

enum SortCondition {
    "作成日時昇順"
    CreatedAtAsc
    "作成日時降順"
    CreatedAtDesc
    "更新日時昇順"
    UpdatedAtAsc
    "更新日時降順"
    UpdatedAtDesc
    "日時昇順"
    DateAsc
    "日時降順"
    DateDesc
}

type MapPageOptions {
    popupMode: PopupMode
    itemLabel: ItemLabelMode
    "ゲストユーザの操作権限"
    guestUserAuthLevel: Auth!
    "新規登録ユーザに設定する権限"
    newUserAuthLevel: Auth!
    "使用パネル"
    usePanels: [String!]
    "コンテンツソート順"
    contentsSortCondition: SortCondition
    "その他オプション文字列"
    options: [String!]
}

type MapDefine {
    name: String!
    useMaps: [MapKind!]!
    defaultMapKind: MapKind!
    options: MapPageOptions!
    originalIcons: [IconDefine!]!
}

scalar DataId
scalar ItemDatasourceConfig
scalar ContentDatasourceConfig
scalar JSON
scalar Geometry
scalar IconKey
scalar GeoProperties
scalar GeocoderIdInfo
scalar ContentValueMap
scalar MapKind
scalar IconDefine
